/* HelloWorld.html generated by Svelte v1.50.1 */
var HelloWorld = (function() { "use strict";

	function create_main_fragment(state, component) {
		var h1, text, text_1, text_2, text_3, p, text_4, text_5, text_6, div, text_7;

		var current_block_type = select_block_type(state);
		var if_block = current_block_type(state, component);

		var array = state.array;

		var each_blocks = [];

		for (var i = 0; i < array.length; i += 1) {
			each_blocks[i] = create_each_block(state, array, array[i], i, component);
		}

		return {
			c: function create() {
				h1 = createElement("h1");
				text = createText("Hello ");
				text_1 = createText(state.name);
				text_2 = createText("!");
				text_3 = createText("\n\n");
				p = createElement("p");
				text_4 = createText(state.isActive);
				text_5 = createText("\n");
				if_block.c();
				text_6 = createText("\n\n");
				div = createElement("div");
				text_7 = createText("Let's count our results ");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
			},

			m: function mount(target, anchor) {
				insertNode(h1, target, anchor);
				appendNode(text, h1);
				appendNode(text_1, h1);
				appendNode(text_2, h1);
				insertNode(text_3, target, anchor);
				insertNode(p, target, anchor);
				appendNode(text_4, p);
				insertNode(text_5, target, anchor);
				if_block.m(target, anchor);
				insertNode(text_6, target, anchor);
				insertNode(div, target, anchor);
				appendNode(text_7, div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}
			},

			p: function update(changed, state) {
				if (changed.name) {
					text_1.data = state.name;
				}

				if (changed.isActive) {
					text_4.data = state.isActive;
				}

				if (current_block_type !== (current_block_type = select_block_type(state))) {
					if_block.u();
					if_block.d();
					if_block = current_block_type(state, component);
					if_block.c();
					if_block.m(text_6.parentNode, text_6);
				}

				var array = state.array;

				if (changed.array) {
					for (var i = 0; i < array.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, array, array[i], i);
						} else {
							each_blocks[i] = create_each_block(state, array, array[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(div, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = array.length;
				}
			},

			u: function unmount() {
				detachNode(h1);
				detachNode(text_3);
				detachNode(p);
				detachNode(text_5);
				if_block.u();
				detachNode(text_6);
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy() {
				if_block.d();

				destroyEach(each_blocks);
			}
		};
	}

	// (4:0) {{#if isActive}}
	function create_if_block(state, component) {
		var p;

		return {
			c: function create() {
				p = createElement("p");
				p.textContent = "wow, this is active!";
			},

			m: function mount(target, anchor) {
				insertNode(p, target, anchor);
			},

			u: function unmount() {
				detachNode(p);
			},

			d: noop
		};
	}

	// (6:0) {{else}}
	function create_if_block_1(state, component) {
		var p;

		return {
			c: function create() {
				p = createElement("p");
				p.textContent = "this is not active, and that sucks...";
			},

			m: function mount(target, anchor) {
				insertNode(p, target, anchor);
			},

			u: function unmount() {
				detachNode(p);
			},

			d: noop
		};
	}

	// (11:26) {{#each array as row}}
	function create_each_block(state, array, row, row_index, component) {
		var text_value = row, text;

		return {
			c: function create() {
				text = createText(text_value);
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
			},

			p: function update(changed, state, array, row, row_index) {
				if ((changed.array) && text_value !== (text_value = row)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(text);
			},

			d: noop
		};
	}

	function select_block_type(state) {
		if (state.isActive) return create_if_block;
		return create_if_block_1;
	}

	function HelloWorld(options) {
		init(this, options);
		this._state = assign({}, options.data);

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);
		}
	}

	assign(HelloWorld.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	HelloWorld.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function noop() {}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return HelloWorld;
}());